// Mocks generated by Mockito 5.4.6 from annotations
// in task_manager/test/features/task/presentation/bloc/task_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager/core/error/failures.dart' as _i6;
import 'package:task_manager/features/task/domain/entities/task.dart' as _i7;
import 'package:task_manager/features/task/domain/repositories/task_repository.dart'
    as _i2;
import 'package:task_manager/features/task/domain/usecases/add_task.dart'
    as _i8;
import 'package:task_manager/features/task/domain/usecases/get_tasks.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskRepository_0 extends _i1.SmartFake
    implements _i2.TaskRepository {
  _FakeTaskRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTasks extends _i1.Mock implements _i4.GetTasks {
  MockGetTasks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get taskRepository =>
      (super.noSuchMethod(
            Invocation.getter(#taskRepository),
            returnValue: _FakeTaskRepository_0(
              this,
              Invocation.getter(#taskRepository),
            ),
          )
          as _i2.TaskRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Task>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Task>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Task>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Task>>>);
}

/// A class which mocks [AddTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTask extends _i1.Mock implements _i8.AddTask {
  MockAddTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get taskRepository =>
      (super.noSuchMethod(
            Invocation.getter(#taskRepository),
            returnValue: _FakeTaskRepository_0(
              this,
              Invocation.getter(#taskRepository),
            ),
          )
          as _i2.TaskRepository);

  @override
  _i5.Future<void> call(_i7.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#call, [task]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
